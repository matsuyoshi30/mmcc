# List

- [x] basic arithmetic operator +, -, *, /
- [x] () operator
- [x] unary operator +, -
- [x] comparison operator >, <, >=, <=, ==, !=
- [x] local variable
- [x] if-else statement
- [x] while, for-loop
- [x] block statements
- [x] function call
- [x] function definition
- [x] type keyword 'int'
- [x] pointer operator *, &
- [x] pointer addition and subtraction
- [x] array, [] operator
- [x] sizeof
- [x] global variable
- [x] type keyword 'char'
- [x] string literal
- [x] GNU statement expression ({})
- [x] comma separator
- [x] escape char
- [x] nested type declarator
- [x] comma operator
- [x] struct
- [x] struct tag
- [x] variable scope
- [x] access struct member using ->
- [x] typedef
- [x] type keyword 'void'
- [x] char literal
- [x] enum
- [x] !
- [x] postfix ++, --
- [x] prefix ++, --
- [x] +=, -=, *=, /=
- [x] &&, ||
- [x] break
- [x] continue
- switch case
- preprocesser
- union
- %
- %=

# BNF

program       = ( basetype ident ( function | gvar ";" ) | typedefs )*
function      = "(" funcparams* ")" ( "{" stmt* "}" | ";" )
funcparams    = ( basetype declarator ( "," basetype declarator )* )? ")"
stmt          = "return" expr? ";"
              | "{" stmt* "}"
              | "if" "(" expr ")" stmt ( "else" stmt )?
              | "while" "(" expr ")" stmt
              | "for" "(" expr_stmt? ";" expr? ";" expr_stmt? ")" stmt
              | "break" ";"
              | typedefs
              | declaration
              | expr_stmt ";"
typedefs      = "typedef" basetype declarator ( "," declarator )* ";"
declaration   = basetype declarator ( "=" expr )? ( "," declarator ( "=" expr )? )* ";"
is_typename   = "int" | "char" | "struct" | "void" | typedef_name | "enum"
basetype      = is_typename | typedef_name
declarator    = "*"* ( "(" declarator ")" | ident ) ( type_suffix )?
type_suffix   = ( "[" num "]" ( type_suffix )? )?
struct_decl   = ident | ident "{" struct_member* | "{" struct_member*
struct_member = ( basetype declarator ( "," declarator )* ";" )* "}"
enum_decl     = ident? "{" enum-list* "}"
enum-list     = ident ( "=" num )? ( "," ident ( "=" num)? )*
expr_stmt     = expr
expr          = assign ( "," assign )*
assign        = logicOr ( "=" assign | "+=" assign | "-=" assign | "*=" assign | "/=" assign )?
logicOr       = logicAnd ( "||" logicAnd )?
logicAnd      = equality ( "&&" equality )?
equality      = relational ( "==" relational | "!=" relational )*
relational    = add ( ">" add | "<" add | ">=" add | "<=" add )*
add           = mul ( "+" mul | "-" mul )*
mul           = unary ( '*' unary | '/' unary )*
unary         = ( '+' | '-' )? primary
              | ( '&' | '*' | '!' )? unary
              | ( "++" | "--" ) unary
              | "sizeof" unary | postfix
postfix       = primary ( ( "[" expr "]" ) | ( "." ident ) | ( "->" ident ) )*
primary       = '(' '{' stmt ( stmt )* '}' ')' // last stmt should be expr_stmt
              | '(' expr ')'
              | ident (( "(" funcargs* )? | ('++' | '--'))
              | num | '"' str '"'
funcargs      = ( assign ( "," assign )* )? ")"
